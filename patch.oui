diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index f7c561c4dcdd..6908c6361692 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -84,6 +84,23 @@ struct clone_args;
 #include <linux/personality.h>
 #include <trace/syscall.h>
 
+struct expose_pte_args {
+//PID of the target task to expose pte (can be the caller task or others)
+pid_t pid;
+//begin userspace VA of the flattened page table
+unsigned long begin_fpt_vaddr;
+//end userspace VA of the flattened page table
+unsigned long end_fpt_vaddr;
+//begin userspace VA of the remapped PTE table
+unsigned long begin_pte_vaddr;
+//end userspace VA of the remapped PTE table
+unsigned long end_pte_vaddr;
+//begin of userspace VA to expose PTE mappings
+unsigned long begin_vaddr;
+//end of userspace VA to expose PTE mappings
+unsigned long end_vaddr;
+};
+
 #ifdef CONFIG_ARCH_HAS_SYSCALL_WRAPPER
 /*
  * It may be useful for an architecture to override the definitions of the
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 1fc8faa6e973..740a1c945f12 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -850,9 +850,12 @@ __SYSCALL(__NR_pidfd_open, sys_pidfd_open)
 #define __NR_clone3 435
 __SYSCALL(__NR_clone3, sys_clone3)
 #endif
+#define __NR_expose_pte 436
+__SYSCALL(__NR_expose_pte, sys_expose_pte)
+
 
 #undef __NR_syscalls
-#define __NR_syscalls 436
+#define __NR_syscalls 437
 
 /*
  * 32 bit systems traditionally used different
diff --git a/kernel/sys.c b/kernel/sys.c
index a611d1d58c7d..dabd3027ec4c 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -2649,3 +2649,80 @@ COMPAT_SYSCALL_DEFINE1(sysinfo, struct compat_sysinfo __user *, info)
 	return 0;
 }
 #endif /* CONFIG_COMPAT */
+
+struct page *walk_page_table(unsigned long addr)
+{
+	pgd_t *pgd;
+    pte_t *ptep, pte;
+    pud_t *pud;
+    pmd_t *pmd;
+
+    struct page *page = NULL;
+    struct mm_struct *mm = current->mm;
+
+    pgd = pgd_offset(mm, addr);
+    if (pgd_none(*pgd) || pgd_bad(*pgd))
+        goto out;
+    printk(KERN_NOTICE "Valid pgd");
+
+    pud = pud_offset(pgd, addr);
+    if (pud_none(*pud) || pud_bad(*pud))
+        goto out;
+    printk(KERN_NOTICE "Valid pud");
+
+    pmd = pmd_offset(pud, addr);
+    if (pmd_none(*pmd) || pmd_bad(*pmd))
+        goto out;
+    printk(KERN_NOTICE "Valid pmd");
+
+    ptep = pte_offset_map(pmd, addr);
+    if (!ptep)
+        goto out;
+    pte = *ptep;
+
+    page = pte_page(pte);
+    if (page)
+        printk(KERN_INFO "page frame struct is @ %p", page);
+
+	pte_unmap(ptep); 
+	
+ out:
+    return page;
+}
+
+SYSCALL_DEFINE1(expose_pte, struct expose_pte_args __user *, args)
+{	
+	int ret; 
+	struct task_struct *task_str;
+	struct mm_struct *mm;
+	struct page page; 
+	unsigned long start_fpt, end_fpt, start_pte, end_pte, start_vaddr, end_vaddr; 
+	unsigned long vaddr_cnt;
+
+	start_fpt = args->begin_fpt_vaddr;
+	end_fpt = args->end_fpt_vaddr;
+	start_pte = args->begin_pte_vaddr;
+	end_pte = args->end_pte_vaddr;
+	start_vaddr = args->begin_vaddr;
+	end_vaddr = args->end_vaddr;
+
+	ret = syscall(129, args->pid, 0);
+	start_fpt = args -> begin_fpt_addr;
+
+	if (ret != 0)
+	{
+		fprintf(stderr,  "\nThe task doesn't exist \nerror: %s", strerror(errno));
+        exit(errno);
+	}
+
+	task_str = get_pid_task(args->pid, PIDTYPE_PID); 
+	mm = task_str-> mm;
+
+	for(vaddr_cnt = begin_vaddr; vaddr_cnt <= end_vaddr; vaddr_cnt ++)
+	{
+		page = walk_page_table(addr);
+	}
+
+
+	return 0;
+}
\ No newline at end of file
